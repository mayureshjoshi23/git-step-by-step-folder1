Configuring Git account on local machine
----------------------------------------

git config --global user.name "mayureshjoshi23"

git config --global user.email "mayureshjoshi3@gmail.com"

git config --global core.editor "'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -nosession"

git config --list

git config user.name


Git help
--------

git help config

git config --help

man git-config


Git directory access
--------------------

cd /G/Learning/GIT_LEARNING/git-step-by-step-folder1


Git initialized empty local repo
--------------------------------

git init


Git add file for the next commit (Stage)
--------------------------------

git add *.txt

git add .    // This is to stage all changes from current folder.

git add is a multipurpose command – you use it to begin tracking new files, to stage files, and to do other things like marking merge-conflicted files as resolved. 
It may be helpful to think of it more as “add this content to the next commit” rather than “add this file to the project”.


Commit in local repo
--------------------

git commit -m "Initial commit"

Adding the -a option to the git commit command makes Git automatically stage every file that is already tracked before doing the commit, letting you skip the git add part


Cloning local repo
------------------
cd /G/Learning/GIT_LEARNING/git-step-by-step-folder1-clone
git clone "file:///G:/Learning/GIT_LEARNING/git-step-by-step-folder1/"

or directly fire this command

cd /G/Learning/GIT_LEARNING/
git clone "file:///G:/Learning/GIT_LEARNING/" git-step-by-step-folder1


Checking the Status of Your Files
---------------------------------

git status


Unstage
-------

git reset HEAD


To discard current staged changes and maintain previously commited changes
--------------------------------------------------------------------------

git checkout README.txt



Ignoring Files
--------------
vi .gitignore

add file / directory name(s) tobe ignored e.g. following are the lines present in .gitignore file

																									.gitignore
																									*.log
																									*.class


The rules for the patterns you can put in the .gitignore file are as follows:

Blank lines or lines starting with # are ignored.

Standard glob patterns work.

You can start patterns with a forward slash (/) to avoid recursivity.

You can end patterns with a forward slash (/) to specify a directory.

You can negate a pattern by starting it with an exclamation point (!).

Glob patterns are like simplified regular expressions that shells use. 
An asterisk (*) matches zero or more characters; 
[abc] matches any character inside the brackets (in this case a, b, or c); 
a question mark (?) matches a single character; 
and brackets enclosing characters separated by a hyphen ([0-9]) matches any character between them (in this case 0 through 9). 
You can also use two asterisks to match nested directories; a/**/z would match a/z, a/b/z, a/b/c/z, and so on.


Diff
----

git diff

git diff --cached  or  git diff --staged


Skip staging
------------

git commit -a -m 'added new benchmarks'


Remving file from staging
-------------------------

rm PROJECTS.md					// hard drive remove

git rm PROJECTS.md				// remove from git stage

git rm --cached PROJECTS.md		// remove cached version


Moving Files
------------

git mv file_from file_to


Git commit history
------------------

git log

git log -p

git log -p -2

git log --stat

git log --pretty=oneline

git log --pretty=format:"%h - %an, %ar : %s"

git log --pretty=format:"%h %s" --graph

git log --since=2.weeks

git log --pretty="%h - %s" --author=gitster --since="2008-10-01" \
   --before="2008-11-01" --no-merges -- t/
   
   
Undoing Things
--------------

git commit --amend


Unstaging a Staged File
-----------------------

git reset HEAD <file name>


Unmodifying a Modified File
---------------------------
git checkout -- <file name>



Woking with remote
-------------------

To see which remote servers you have configured you can run the command
git remote
or  
git remote -v


	Adding Remote Repositories
	--------------------------
	git remote add <shortname> <url>
	e.g.
	git remote add gl https://github.com/mayureshjoshi23/git-step-by-step-folder1.git
	
	Fetching and Pulling from Your Remotes
	--------------------------------------
	git fetch [remote-name]
	e.g.
	git fetch origin
	

	git fetch command only downloads the data to your local repository – it doesn’t automatically merge it with any of your work or modify what you’re currently working on. 
	You have to merge it manually into your work when you’re ready.
	
	To automatically fetch and then merge that remote branch into your current branch use
	git pull <remote> <branch>
	e.g.
	git pull origin master
	
	Inspecting a Remote
	-------------------
	git remote show <remote-name>
	e.g.
	git remote show origin
	
	Removing and Renaming Remotes
	-----------------------------
	if you want to rename 
	git remote rename <old remote> <new remote>
	e.g.
	git remote rename gl gitLearning
	
	and
	
	if you want to remove
	git remote remove <remote>
	e.g.
	git remote remove gl
	




Git Basics - Tagging
--------------------

	Listing Your Tags
	-----------------
	To list all tags
	git tag
	
	To list tags starting with any specific sting
	git tag -l "<starting pattern>*"
	e.g.
	git tag -l "v1.8.5*"
	
	
	Creating Tags
	-------------
	Git uses two main types of tags: lightweight and annotated. 
	A lightweight tag is very much like a branch that doesn’t change – it’s just a pointer to a specific commit.
	Annotated tags, however, are stored as full objects in the Git database. 
	They’re checksummed; contain the tagger name, email, and date; have a tagging message; and can be signed and verified with GNU Privacy Guard (GPG). 
	It’s generally recommended that you create annotated tags so you can have all this information; but if you want a temporary tag or for some reason don’t want to keep the other information, lightweight tags are available too.
	
		Annotated Tags
		--------------
		git tag -a v0.0.1 -m "my version 0.0.1"
		
		Lightweight Tags
		----------------
		git tag v0.0.2-lw
		
		Tagging Later
		-------------
		Now, suppose you forgot to tag the project at v1.2, which was at the “updated rakefile” commit. You can add it after the fact. 
		To tag that commit, you specify the commit checksum (or part of it) at the end of the command
		git log --oneline
		git tag -a v0.0.3-later 3c999ef
		
		Sharing Tags
		------------
		By default, the git push command doesn’t transfer tags to remote servers. 
		You will have to explicitly push tags to a shared server after you have created them. 
		This process is just like sharing remote branches – you can run  
		git push origin <tagname>
		e.g.
		git push origin v0.0.3-later
		
		If you have a lot of tags that you want to push up at once, you can also use the --tags option to the git push command. 
		This will transfer all of your tags to the remote server that are not already there.
		
		git push origin --tags
		
		
		Checking out Tags
		-----------------
		You can’t really check out a tag in Git, since they can’t be moved around. 
		If you want to put a version of your repository in your working directory that looks like a specific tag, you can create a new branch at a specific tag with 
		git checkout -b [branchname] [tagname]
		

		
		
		
Git Basics - Git Aliases
------------------------

	git config --global alias.co checkout
	git config --global alias.br branch
	git config --global alias.ci commit
	git config --global alias.st status

	git config --global alias.unstage 'reset HEAD --'
	git config --global alias.lg 'log --pretty=format:"%h - %an, %ar : %s" --graph'

	git config --global alias.visual '!gitk'
	
	
	
	
	
