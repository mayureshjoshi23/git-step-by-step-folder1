Configuring Git account on local machine
----------------------------------------

git config --global user.name "mayureshjoshi23"

git config --global user.email "mayureshjoshi3@gmail.com"

git config --global core.editor "'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -nosession"

git config --list

git config user.name


Git help
--------

git help config

git config --help

man git-config


Git directory access
--------------------

cd /G/Learning/GIT_LEARNING/git-step-by-step-folder1


Git initialized empty local repo
--------------------------------

git init


Git add file for the next commit (Stage)
--------------------------------

git add *.txt

git add .    // This is to stage all changes from current folder.

git add is a multipurpose command – you use it to begin tracking new files, to stage files, and to do other things like marking merge-conflicted files as resolved. 
It may be helpful to think of it more as “add this content to the next commit” rather than “add this file to the project”.


Commit in local repo
--------------------

git commit -m "Initial commit"

Adding the -a option to the git commit command makes Git automatically stage every file that is already tracked before doing the commit, letting you skip the git add part


Cloning local repo
------------------
cd /G/Learning/GIT_LEARNING/git-step-by-step-folder1-clone
git clone "file:///G:/Learning/GIT_LEARNING/git-step-by-step-folder1/"

or directly fire this command

cd /G/Learning/GIT_LEARNING/
git clone "file:///G:/Learning/GIT_LEARNING/" git-step-by-step-folder1


Checking the Status of Your Files
---------------------------------

git status


Unstage
-------

git reset HEAD


To discard current staged changes and maintain previously commited changes
--------------------------------------------------------------------------

git checkout README.txt



Ignoring Files
--------------
vi .gitignore

add file / directory name(s) tobe ignored e.g. following are the lines present in .gitignore file

																									.gitignore
																									*.log
																									*.class


The rules for the patterns you can put in the .gitignore file are as follows:

Blank lines or lines starting with # are ignored.

Standard glob patterns work.

You can start patterns with a forward slash (/) to avoid recursivity.

You can end patterns with a forward slash (/) to specify a directory.

You can negate a pattern by starting it with an exclamation point (!).

Glob patterns are like simplified regular expressions that shells use. 
An asterisk (*) matches zero or more characters; 
[abc] matches any character inside the brackets (in this case a, b, or c); 
a question mark (?) matches a single character; 
and brackets enclosing characters separated by a hyphen ([0-9]) matches any character between them (in this case 0 through 9). 
You can also use two asterisks to match nested directories; a/**/z would match a/z, a/b/z, a/b/c/z, and so on.


Diff
----

git diff

git diff --cached  or  git diff --staged


Skip staging
------------

git commit -a -m 'added new benchmarks'


Remving file from staging
-------------------------

rm PROJECTS.md					// hard drive remove

git rm PROJECTS.md				// remove from git stage

git rm --cached PROJECTS.md		// remove cached version


Moving Files
------------

git mv file_from file_to


Git commit history
------------------

git log

git log -p

git log -p -2

git log --stat

git log --pretty=oneline

git log --pretty=format:"%h - %an, %ar : %s"

git log --pretty=format:"%h %s" --graph

git log --since=2.weeks

git log --pretty="%h - %s" --author=gitster --since="2008-10-01" \
   --before="2008-11-01" --no-merges -- t/
   
   
Undoing Things
--------------

git commit --amend